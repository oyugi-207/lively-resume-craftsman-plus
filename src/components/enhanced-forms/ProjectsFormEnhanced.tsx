
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { toast } from 'sonner';
import { Plus, Trash2, Brain, Wand2, Loader2, Sparkles, FileText, Code2, Target } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useAPIKey } from '@/hooks/useAPIKey';

interface Project {
  id: number;
  name: string;
  description: string;
  technologies: string;
  link: string;
  startDate: string;
  endDate: string;
}

interface ProjectsFormEnhancedProps {
  data: Project[];
  onChange: (data: Project[]) => void;
}

const ProjectsFormEnhanced: React.FC<ProjectsFormEnhancedProps> = ({ data, onChange }) => {
  const { apiKey } = useAPIKey();
  const [jobDescription, setJobDescription] = useState('');
  const [generatingProject, setGeneratingProject] = useState(false);
  const [enhancingId, setEnhancingId] = useState<number | null>(null);
  const [showJobInput, setShowJobInput] = useState(false);

  const addProject = () => {
    const newProject: Project = {
      id: Date.now(),
      name: '',
      description: '',
      technologies: '',
      link: '',
      startDate: '',
      endDate: ''
    };
    onChange([...data, newProject]);
  };

  const updateProject = (id: number, field: keyof Project, value: string) => {
    onChange(data.map(project => 
      project.id === id ? { ...project, [field]: value } : project
    ));
  };

  const removeProject = (id: number) => {
    onChange(data.filter(project => project.id !== id));
  };

  const generateProjectFromJob = async () => {
    if (!apiKey) {
      toast.error('Please set your Gemini API key in Settings first');
      return;
    }

    if (!jobDescription.trim()) {
      toast.error('Please enter a job description first');
      return;
    }

    setGeneratingProject(true);
    try {
      const prompt = `Based on this job description: "${jobDescription}", create a relevant project that would demonstrate the required skills. Include:
      - A project name that showcases relevant technologies
      - A detailed description highlighting key features and your role
      - Technologies/tools used (separated by commas)
      - Focus on skills mentioned in the job description
      
      Format as JSON with: name, description, technologies`;

      const { data: result, error } = await supabase.functions.invoke('gemini-ai-optimize', {
        body: { 
          prompt,
          apiKey 
        }
      });

      if (error) throw error;

      if (result?.content) {
        try {
          const projectData = JSON.parse(result.content);
          const newProject: Project = {
            id: Date.now(),
            name: projectData.name || 'AI Generated Project',
            description: projectData.description || 'Project description generated by AI',
            technologies: projectData.technologies || 'React, Node.js, MongoDB',
            link: '',
            startDate: '',
            endDate: ''
          };
          
          onChange([...data, newProject]);
          toast.success('AI-generated project added!');
          setShowJobInput(false);
        } catch (parseError) {
          // Fallback if JSON parsing fails
          const newProject: Project = {
            id: Date.now(),
            name: 'Relevant Project',
            description: result.content,
            technologies: 'React, JavaScript, CSS',
            link: '',
            startDate: '',
            endDate: ''
          };
          onChange([...data, newProject]);
          toast.success('AI-generated project added!');
          setShowJobInput(false);
        }
      }
    } catch (error: any) {
      console.error('AI project generation error:', error);
      toast.error('Failed to generate project. Please check your API key.');
    } finally {
      setGeneratingProject(false);
    }
  };

  const enhanceProjectDescription = async (projectId: number) => {
    if (!apiKey) {
      toast.error('Please set your Gemini API key in Settings first');
      return;
    }

    const project = data.find(proj => proj.id === projectId);
    if (!project || !project.description.trim()) {
      toast.error('Please add a description first to enhance it');
      return;
    }

    setEnhancingId(projectId);
    try {
      const jobContext = jobDescription.trim() 
        ? `Job target: ${jobDescription}\n\n` 
        : '';
      
      const prompt = `${jobContext}Enhance this project description: "${project.description}". 
      Make it more compelling and professional by:
      - Highlighting technical achievements and challenges solved
      - Emphasizing relevant technologies and methodologies
      - Including specific features and functionalities
      - Making it relevant to the target job if provided
      - Using active voice and strong action verbs`;

      const { data: result, error } = await supabase.functions.invoke('gemini-ai-optimize', {
        body: { 
          prompt,
          apiKey 
        }
      });

      if (error) throw error;

      if (result?.content) {
        updateProject(projectId, 'description', result.content.trim());
        toast.success('Project description enhanced with AI!');
      }
    } catch (error: any) {
      console.error('AI enhancement error:', error);
      toast.error('Failed to enhance description. Please check your API key.');
    } finally {
      setEnhancingId(null);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Code2 className="w-5 h-5" />
          Projects
          <Badge variant="secondary" className="ml-auto">
            <Sparkles className="w-3 h-3 mr-1" />
            AI-Enhanced
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex gap-2">
          <Button onClick={addProject} variant="outline" size="sm">
            <Plus className="w-4 h-4 mr-2" />
            Add Project
          </Button>
          <Button
            onClick={() => setShowJobInput(!showJobInput)}
            variant="outline"
            size="sm"
            className="bg-blue-50 hover:bg-blue-100 dark:bg-blue-950/20"
          >
            <Target className="w-4 h-4 mr-2" />
            Generate from Job
          </Button>
        </div>

        {showJobInput && (
          <div className="p-4 border rounded-lg bg-blue-50 dark:bg-blue-950/20">
            <label className="block text-sm font-medium mb-2">Job Description</label>
            <Textarea
              value={jobDescription}
              onChange={(e) => setJobDescription(e.target.value)}
              placeholder="Paste the job description to generate relevant projects..."
              className="min-h-[100px] mb-3"
            />
            <Button
              onClick={generateProjectFromJob}
              disabled={generatingProject}
              size="sm"
              className="w-full"
            >
              {generatingProject ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Generating Project...
                </>
              ) : (
                <>
                  <Brain className="w-4 h-4 mr-2" />
                  Generate Relevant Project
                </>
              )}
            </Button>
          </div>
        )}

        {data.map((project) => (
          <Card key={project.id} className="relative">
            <CardContent className="p-4">
              <div className="flex justify-between items-start mb-4">
                <h4 className="font-medium">Project Entry</h4>
                <div className="flex gap-2">
                  <Button
                    onClick={() => enhanceProjectDescription(project.id)}
                    disabled={enhancingId === project.id}
                    variant="outline"
                    size="sm"
                  >
                    {enhancingId === project.id ? (
                      <Loader2 className="w-3 h-3 mr-1 animate-spin" />
                    ) : (
                      <Wand2 className="w-3 h-3 mr-1" />
                    )}
                    Enhance
                  </Button>
                  <Button
                    onClick={() => removeProject(project.id)}
                    variant="outline"
                    size="sm"
                    className="text-red-600 hover:text-red-700"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Project Name *</label>
                  <Input
                    value={project.name}
                    onChange={(e) => updateProject(project.id, 'name', e.target.value)}
                    placeholder="E-commerce Platform"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Project Link</label>
                  <Input
                    value={project.link}
                    onChange={(e) => updateProject(project.id, 'link', e.target.value)}
                    placeholder="https://github.com/username/project"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Start Date</label>
                  <Input
                    type="month"
                    value={project.startDate}
                    onChange={(e) => updateProject(project.id, 'startDate', e.target.value)}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">End Date</label>
                  <Input
                    type="month"
                    value={project.endDate}
                    onChange={(e) => updateProject(project.id, 'endDate', e.target.value)}
                    placeholder="Present"
                  />
                </div>
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium mb-1">Technologies Used</label>
                <Input
                  value={project.technologies}
                  onChange={(e) => updateProject(project.id, 'technologies', e.target.value)}
                  placeholder="React, Node.js, MongoDB, AWS"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Separate technologies with commas
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">Description</label>
                <Textarea
                  value={project.description}
                  onChange={(e) => updateProject(project.id, 'description', e.target.value)}
                  placeholder="Developed a full-stack e-commerce platform with user authentication, payment processing, and real-time inventory management. Implemented responsive design and optimized for performance, resulting in 40% faster load times."
                  className="min-h-[100px]"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Describe the project, your role, technologies used, and key achievements
                </p>
              </div>
            </CardContent>
          </Card>
        ))}

        {data.length === 0 && (
          <div className="text-center py-8 text-gray-500">
            <Code2 className="w-12 h-12 mx-auto mb-4 opacity-50" />
            <p>No projects yet. Add your first project or generate one from a job description.</p>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default ProjectsFormEnhanced;
